#!/bin/sh
#
# Script zum synchronisieren von Serien auf den Pi
#
# Einzelne Serien Staffeln
# sowie
# aktuelle Folgen von woechentlich ausgetrahlten Serien
#
# 0.1 Initial release - 2014/09/23
# 0.2 Added case - 2014/09/23
#
#
#

# Variablendeklaration
target="/mnt/rpiseries"
source="/media/d3c21c66-af4b-41d4-b098-462e83fa641d/Serien"
age="-14"
ageSeason="$4"
files="/tmp/rsyncfiles"
searchVar1="$2"
searchVar2="$3"
host="nuc"

# Check ob das Mountverzeichnis exisitert
if [ ! -d "$target" ]; then
	mkdir "$target"
fi

# Funktion zum mounten des Verzeichnisses in das lokale Dateisystem via NFS
mountRPi () {
	echo "Checking if Directory is already mounted..."
	if [ `stat -fc%t:%T "$target"` != `stat -fc%t:%T "$target/.."` ]; then
		echo "$target is already mounted!"
	else
		echo "$target is not mounted."
		echo "Mounting Directory now..."
		mount 192.168.178.66:/export/Serien/Serien "$target"
		echo "Directory mounted successfully!"
	fi
}

# Funktion zum unmounten des Verzeichnisses
umountRPi () {
	echo "Unmounting Directory now..."
	umount "$target"
	echo "Directory unmounted successfully!"
}

# Funktion zum auflisten der Dateien nicht aelter als X Tage
collectFiles () {
	echo "Changing directory..."
	cd "$source"
	echo "Directory changed. Searching for files that where modified within the last 14 days..."
	find . -type f -mtime "$age" > "$files"
	echo "Files collected."
}

# Funktion zum synchronisieren der woechentlichen Serien
syncFiles () {
	echo "Syncing files now..."
	rsync -Ravh --files-from="$files" . "$target"
	echo "Files synced successfully!"
}

collectSeason () {
	echo "Writing Season with correct path to $files"
	#example: find . -name "Scrubs*""*S04*"
	cd "$source"
	find . -type f -name "$searchVar1""$searchVar2" -mtime "$ageSeason" > "$files"
	cat "$files"
}

syncSeason () {
	echo "Syncing Season now..."
	rsync -Ravh --files-from="$files" . "$target"
	echo "Seasons synced successfully!"
}

updateXBMCLib () {
	echo "Updating XBMC Library..."
	xbmc-send --action="UpdateLibrary(video)" --host="$host"
	echo "Updated XBMC Library!"
}

updateXBMCLibClean () {
	echo "Updated and cleaning XBMC Library..."
	xbmc-send --action="UpdateLibrary(video)" --host="$host"
	sleep 10
	xbmc-send --action="CleanLibrary(video)" --host="$host"
	echo "Updated and cleaned XBMC Library!"
}

readme () {
echo "Usage

pisync [option] [arguments]

options:
	sync
		no arguments
	season
		\"title\" \"season\" \"modification time\"
		\"Arrow\" \"*S01*\" \"-30\"
	mount
		no arguments
	umount
		no arguments
	updateLib
		no arguments
	updateClean
		no arguments"
}

case $1 in
	season)
		mountRPi
		collectSeason
		syncSeason
		umountRPi
		updateXBMCLib
	;;

	sync)
		mountRPi
		collectFiles
		syncFiles
		umountRPi
		updateXBMCLib
	;;

	mount)
		mountRPi
	;;

	umount)
		umountRPi
	;;
	updateLib)
		updateXBMCLib
	;;
	updateClean)
		updateXBMCLibClean
	;;

	*)
		echo "pisync called with unkown argument"
		readme
		exit 1
	;;
esac

exit 0
